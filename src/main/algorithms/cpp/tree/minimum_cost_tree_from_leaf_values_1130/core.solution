DP Solution
Find the cost for the interval [i,j].
To build up the interval [i,j],
we need to split it into left subtree and sub tree,
dp[i, j] = dp[i, k] + dp[k + 1, j] + max(A[i, k]) * max(A[k + 1, j])

If you don't understand dp solution,
I won't explain it more and you won't find the answer here.
Take your time,
read any other solutions,
and come back at your own will.

If you got it, continue to read.

DP Complexity
Second question after this dp solution,
what's the complexity?
N^2 states and O(N) to find each.
So this solution is O(N^3) time and O(N^2) space.

You thought it's fine.
After several nested for loop, you got a happy green accepted.
You smiled and released a sigh as a winner.

What a great practice for DP skill!
Then you noticed it's medium.
That's it, just a standard medium problem of dp.
Nothing can stop you. Even dp problem.


True story
So you didn't Read and Upvote this post.
(upvote is a good mark of having read)
One day, you meet exactly the same solution during an interview.
Your heart welled over with joy,
and you bring up your solution with confidence.

One week later, you receive an email.
The second paragraph starts with a key word "Unfortunately".

What the heck!?
You solved the interview problem perfectly,
but the company didn't appreciate your talent.
What's more on earth did they want?
WHY?


Why
Here is the reason.
This is not a dp problem at all.

Because dp solution test all ways to build up the tree,
including many unnecessay tries.
Honestly speaking, it's kinda of brute force.
Yes, brute force testing, with memorization.


Intuition
Let's review the problem again.

When we build a node in the tree, we compared the two numbers a and b.
In this process,
the smaller one is removed and we won't use it anymore,
and the bigger one actually stays.

The problem can translated as following:
Given an array A, choose two neighbors in the array a and b,
we can remove the smaller one min(a,b) and the cost is a * b.
What is the minimum cost to remove the whole array until only one left?

To remove a number a, it needs a cost a * b, where b >= a.
So a has to be removed by a bigger number.
We want minimize this cost, so we need to minimize b.

b has two candidates, the first bigger number on the left,
the first bigger number on the right.

The cost to remove a is a * min(left, right).
