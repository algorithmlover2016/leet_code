力扣股票买卖题目其实都是一个套路，而其中又以本题需要考虑的更细致，因为本题中交易的次数k不是固定的，接下来请看分析
    121. 买卖股票的最佳时机：限定交易次数 k=1
    122. 买卖股票的最佳时机 II：交易次数无限制
    123. 买卖股票的最佳时机 III：限定交易次数 k=2
    188. 买卖股票的最佳时机 IV：限定交易次数 k=?
    309. 最佳买卖股票时机含冷冻期：含有交易冷冻期
    714. 买卖股票的最佳时机含手续费：每次交易含手续费

本题使用dp动态规划进行求解，对于动态规划问题，无非就是确定以下几个问题：
    1.dp函数的定义是什么？有几个状态？
    2.初始值如何确定？
    3.状态方程又是什么？
对于以上三点，我觉得是处理好dp问题的重点，只有当我们明确以上几个问题之后，dp的思路就很清晰了，思路有了接下来就是码代码和处理细节/边界问题
本题中存在三种「状态」：天数、是否持有股票的状态、交易次数
而对于每种状态，我们又有不同的选择：
    1. 天数由prices确定
    2. 是否持有股票的状态我们可以用0/1表示，0代表不持有股票，1代表持有股票
    3. 交易次数由k确定

这样一来，我们可以设定一个三维数组dp[i][j][k]，其存储的内容是在第i天，我们持有股票的状态为j，已经进行了k次交易时能够获取的最大利润
这里需要说明的是，第i天和数组的索引一致，它的范围是0 ~ prices.length-1，所以我设置的起点是第0天
比如说dp[5][0][2]：其中存储了 「在第5天时，我们不持有股票，已经进行了2次交易」 时获取的最大利润
好了，到这里dp的定义和状态我们就确定下来了，那么初始值怎么确定呢？

因为对于第0天来说，它所能够获取的最大利润只有两种，与交易次数毫无关系，所以我们有以下初始值：
1.不持有股票时：dp[0][0][k]=0
2.持有股票时：dp[0][1][k]=-prices[0]

好了，到这里初始值也确定下来了，那么还剩下最后一个问题「状态方程」
我们首先要知道一点，第i天的状态只和第i-1天有关，第i天持有/不持有股票 能够获取的最大利润取决于 第i-1天持有/不持有股票
这里需要注意：我将买入股票时作为一次交易，也就是在买入股票的时候交易次数+1
第i天不持有股票时：
1.如果第i-1天也不持有股票，那就代表状态不变，第i天的状态=第i-1天的状态
2.如果第i-1天持有股票，说明我们在第i天把股票卖了，既然卖股票赚钱了，利润就要多prices[i]

dp[i][0][k] = max(dp[i-1][0][k] , dp[i-1][1][k]+prices[i])

第i天持有股票时：
1.如果第i-1天也持有股票，那就代表状态不变，即dp[i][1][k] = dp[i-1][1][k]
2.如果第i-1天不持有股票，说明我们在第i天买入股票，既然买股票要花钱，利润就要少price[i]
买入股票的同时，当天的交易次数要在前一天的基础上+1

dp[i][1][k] = max(dp[i-1][1][k] , dp[i-1][0][k-1]-prices[i])
至此，思路捋顺，开始码代码了！
还需要注意的点：因为一次交易涉及一天买入一天卖出，一共两天，所以如果k值大于数组长度的一半，k就直接取数组长度的一半，因为多余的交易次数无法达到
即：k=min(k , prices.length/2)

代码

class Solution {
    public int maxProfit(int K, int[] prices) {//这里悄咪咪把小k换成了大K，便于后续索引赋值
        int n=prices.length;
        if(n<=1)    return 0;
        //因为一次交易至少涉及两天，所以如果k大于总天数的一半，就直接取天数一半即可，多余的交易次数是无意义的
        K=Math.min(K,n/2);

        /*dp定义：dp[i][j][k]代表 第i天交易了k次时的最大利润，其中j代表当天是否持有股票，0不持有，1持有*/
        int[][][] dp=new int[n][2][K+1];
        for(int k=0;k<=K;k++){
            dp[0][0][k]=0;
            dp[0][1][k]=-prices[0];
        }

        /*状态方程：
        dp[i][0][k]，当天不持有股票时，看前一天的股票持有情况
        dp[i][1][k]，当天持有股票时，看前一天的股票持有情况*/
        for(int i=1;i<n;i++){
            for(int k=1;k<=K;k++){
                dp[i][0][k]=Math.max(dp[i-1][0][k],dp[i-1][1][k]+prices[i]);
                dp[i][1][k]=Math.max(dp[i-1][1][k],dp[i-1][0][k-1]-prices[i]);
            }
        }
        return dp[n-1][0][K];
    }
}
后传
解决了本题这么难的股票买卖问题，其他题都是小菜一碟

121. 买卖股票的最佳时机：限定交易次数 k=1
我们可以直接设置二维dp[i][j]，其含义是第i天，股票持有状态为j时 能够获取的最大利润
然后设定初始值，找到状态方程：
dp[i][0]=max(dp[i-1][0] , dp[i-1][1]+prices[i])
dp[i][1]=max(dp[i-1][1] , -prices[i]) //因为限定交易次数，所以要进行交易的时候要注意

122. 买卖股票的最佳时机 II：交易次数无限制
直接设置二维dp[i][j]，其含义是第i天，股票持有状态为j时 能够获取的最大利润
然后设定初始值，找到状态方程：
dp[i][0]=max(dp[i-1][0] , dp[i-1][1]+prices[i])
dp[i][1]=max(dp[i-1][1] , dp[i-1][0]-prices[i]) //因为没有限定交易次数，所以按照常规思路

123. 买卖股票的最佳时机 III：限定交易次数 k=2
和本题188思路一致，就是直接将k值设定为2罢了

309. 最佳买卖股票时机含冷冻期：含有交易冷冻期
冷冻期就是：卖出股票后，你无法在第二天买入股票，那又有何难
直接设置三个持有状态：
dp[i][0]：持有股票
dp[i][1]：不持有股票，处于冷冻期
dp[i][2]：不持有股票，不处于冷冻期
dp[i][0]=max(dp[i-1][0] , dp[i-1][2]-prices[i]) //当天持有股票，前一天不可能是冷冻期，也就没有dp[i-1][1]
dp[i][1]=dp[i-1][0]+prices[i] //当天是冷冻期，只可能是前一天持有股票，然后今天卖出股票了
dp[i][2]=max(dp[i-1][1],dp[i-1][2]) //当天是非冷冻期，前一天不可能持有股票

714. 买卖股票的最佳时机含手续费：每次交易含手续费
dp[i][0]=max(dp[i-1][0] , dp[i-1][1]+prices[i]-fee) //卖出股票时完成一次交易，支付手续费
dp[i][1]=max(dp[i-1][1] , dp[i-1][0]-prices[i])

作者：Destinytomycode
链接：https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/solution/javayi-ge-si-lu-da-bao-suo-you-gu-piao-t-pd1p/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
